openapi: 3.0.0

info:
    description: '[OC P7] API backend pour le site Mon Vieux Grimoire'
    version: 1.0.2
    title: Mon Vieux Grimoire
    termsOfService: http://swagger.io/terms/
    contact:
        email: lpb.brigitte@gmail.com
    license:
        name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
    - name: auth
      description: Endpoints for user sign in and in
    - name: books
      description: Endpoints for retrieving and modifying books

paths:
    /api/auth/signup:
        post:
            tags:
                - auth
            description: 'Add a new user'
            requestBody:
                $ref: '#/components/requestBodies/UserLogin'
            responses:
                '200':
                    $ref: '#/components/responses/OkResponse'

    /api/auth/login:
        post:
            tags:
                - auth
            description: 'Login a user and send a connection token'
            requestBody:
                $ref: '#/components/requestBodies/UserLogin'
            responses:
                '200':
                    description: return User connection information
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'

    /api/books:
        get:
            tags:
                - books
            description: Get a list of books
            responses:
                '200':
                    $ref: '#/components/responses/BookListRespones'
        post:
            tags:
                - books
            description: Create a new book, must be logged on
            security:
                - bearerAuth: []
            requestBody:
                $ref: '#/components/requestBodies/BookCreateRequest'
            responses:
                '200':
                    $ref: '#/components/responses/OkResponse'

    /api/books/{id}:
        parameters:
            - name: id
              in: path
              description: ID of the book
              required: true
              schema:
                  type: string
                  format: uuid
        get:
            tags:
                - books
            description: Retrieve a book by it's id
            responses:
                '200':
                    $ref: '#/components/responses/BookRetrieveResponse'
        put:
            tags:
                - books
            description: Update a book by it's id
            security:
                - bearerAuth: []
            requestBody:
                $ref: '#/components/requestBodies/BookUpdateRequest'
            responses:
                '200':
                    $ref: '#/components/responses/OkResponse '
        delete:
            tags:
                - books
            description: Remove a book by it's id
            security:
                - bearerAuth: []
            responses:
                '200':
                    $ref: '#/components/responses/OkResponse'

    /api/books/{id}/rating:
        post:
            tags:
                - books
            description: Add a rating to a book
            security:
                - bearerAuth: []
            responses:
                '200':
                    $ref: '#/components/requestBodies/UserRatingRequest'

    /api/books/bestrating:
        get:
            tags:
                - books
            description: Return top 3 best books
            responses:
                '200':
                    $ref: '#/components/responses/BookListRespones'

servers:
    - url: https://petstore.swagger.io/v2

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer

    requestBodies:
        UserLogin:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/User'
            description: User object for login
            required: true

        BookRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Book'
            description: Book object for creation and update
            required: true

        BookCreateRequest:
            content:
                multipart/form-data:
                    schema:
                        type: object
                        properties:
                            book:
                                $ref: '#/components/schemas/BookCreateUpdate'
                            image:
                                type: string
                                format: base64
                    encoding:
                        image:
                            contentType: image/png, image/jpeg

        BookUpdateRequest:
            content:
                multipart/form-data:
                    schema:
                        type: object
                        properties:
                            book:
                                $ref: '#/components/schemas/BookCreateUpdate'
                            image:
                                type: string
                                format: base64
                    encoding:
                        image:
                            contentType: image/png, image/jpeg

        UserRatingRequest:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            userId:
                                type: string
                                format: uuid
                                readOnly: true
                            rating:
                                $ref: '#/components/schemas/Rating'
            description: Rating body for a book
            required: true

    responses:
        BookListRespones:
            content:
                application/json:
                    schema:
                        type: array
                        items:
                            $ref: '#/components/schemas/Book'
            description: List of books

        BookRetrieveResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Book'
            description: Retrieve a single book

        OkResponse:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
            description: Ok message for a 200

    schemas:
        BookCreateUpdate:
            type: object
            properties:
                userId:
                    type: string
                title:
                    type: string
                author:
                    type: string
                year:
                    type: number
                genre:
                    type: string

        Book:
            allOf:
                - $ref: '#/components/schemas/BookCreateUpdate'
            type: object
            properties:
                id:
                    type: string
                imageUrl:
                    type: string
                    format: url
                ratings:
                    type: array
                    items:
                        type: object
                        properties:
                            userId:
                                type: string
                            grade:
                                $ref: '#/components/schemas/Rating'
                averageRating:
                    type: number

        User:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    format: email
                    writeOnly: true
                password:
                    type: string
                    format: password
                    writeOnly: true
                userId:
                    type: string
                    format: uuid
                    readOnly: true
                token:
                    type: string
                    format: token
                    readOnly: true

        Rating:
            type: integer
            minimum: 0
            maximum: 5
